
二十三种设计模式 分为三类：
    创建型（5）
        单例 ——————某个类只能有一个实例，提供全局化访问
        工厂 ——————定义一个创建对象的接口，而让子类决定实例化哪个
        抽象工厂 ——创建相关/依赖对象的家族，而无需明确指定具体类
        建造者 ————封装一个复杂对象的构建过程，可按步骤构建
        原型 ——————通过复制现有实例来创建新实例
    结构型（7）
        适配器
        装饰
        代理
        桥接
        组合
        外观
        亨元
    行为型（11）
        访问者
        模板
        策略
        状态
        观察者
        备忘录
        中介者
        迭代器
        解释器
        命令
        责任链


-----------------5种创建型模式--------------------------

01、Singleton 推荐使用懒汉模式 ————使用静态块或变量实现。
    但如果有些类比较庞大，所以延迟加载有助于提升性能，
    所以也会使用 饥汉模式

02、工厂方法模式
    普通工厂模式
        \|/
    多方法工厂模式
        \|/
    静态工厂方法模式
        \|/
03、抽象工厂模式

04、建造者模式

05、原型
    实现 Cloneable接口，super.clone()

---------------------7种结构型模式----------------------

06、适配器模式（Adapter）
    类的适配器
        有个Source类，拥有一个方法，待适配；
        目标接口；
        通过继承将Source类，扩展到目标接口的实现类中。
    对象的适配器
        有个Source类，拥有一个方法，待适配；
        目标接口；
        通过持有Source类，扩展到目标接口的实现类中。
    接口的适配器
        不希望实现接口中所有方法时，可创建一个抽象类

07、装饰模式（Decorator）
    给一个对象增加一些新功能，而且是动态的
08、代理模式（Proxy）
    多出一个代理人帮原对象做一些操作。比如中介、律师

    装饰和代理的区别
        装饰：把源传给新对象，新对象调用方法
        代理：直接构造一个新对象，新对象调用方法
09、外观模式（Facade）
    解决类和类之间的依赖关系
        比如Spring将类和类之间的关系配置到配置文件中。
        外观模式将关系放到一个Facade类中。
10、桥接模式（Bridge）
    把事物和具体实现分开，使他们可以各自独立的变化
11、组合模式（Composite）
    组合模式有时叫部分-整体模式，在处理类似树形结构的问题
12、享元模式（Flyweight）
    主要实现对象的共享，即共享池


---------------------11种结构型模式----------------------

Observe 观察者模式
    通过被观察者维护一个观察者列表，这样就解耦了
    当被观察者改变时，就遍历观察者列表，从而通知所有观察者

Proxy 代理模式

装饰模式    增强

组装模式    树
